interface OverloadedModule {
    name: String,
    fileName: String,
    parent: Object,
    original: Object,
    requireActual: Function
}

interface ModuleMock {
    /**
     * Enabled call thought original module
     */
    callThrough(): ModuleMock,

    /**
     * Setting es6 bahavior for a module
     */
    es6(): ModuleMock,

    /**
     * Setting es6 behavior for a current module and overriding default export
     */
    withDefault(stubs: any): ModuleMock,

    /**
     * Overriding export of a module
     */
    with(stubs: any): ModuleMock,

    /**
     * Overriding export of one module by another
     */
    by(module: string): ModuleMock,
    /**
     * Overriding export of one module by something generated by a function
     */
    by(module: (module: OverloadedModule) => Object): ModuleMock,

    enable(): ModuleMock,
    disable(): ModuleMock,

    /**
     * mocks only first direct children.
     */
    directChildOnly(): ModuleMock;
    atAnyPlace(): ModuleMock;

    /**
     * mocks only if parent were mocked
     */
    calledFromMock(): ModuleMock;
    calledFromAnywhere(): ModuleMock;
    /**
     * Force mock to be used, or throw an error otherwise
     */
    toBeUsed(): ModuleMock,

    noToBeUsed(): ModuleMock
}

type ProxyFunction = (r: ModuleMock) => Object;
type RequireFunction<T>= () => T;
type ImportFunction<T> = () => Promise<T>;
type AnyImportFunction<T> = RequireFunction<T> | ImportFunction<T>;
/**
 * @name rewiremock
 * @class
 * Proxies imports/require in order to allow overriding dependencies during testing.
 */
interface rewiremock {
    (module: string): ModuleMock;

    enable(): rewiremock;
    disable(): rewiremock;

    /**
     * executes module in a sanbox
     * @param {Function} loader - loader of target module. You can use import or require. May return a Promise
     * @param {Function} [creator] - mock creator. You may add any mocks inside.
     */
    around<T>(loader: AnyImportFunction<T>, creator?: Function): Promise<T>;
    inScope(callback: Function): rewiremock;

    /**
     * Loads a file and hooks deps in a `proxyquire` way
     * @param {String|Function} fileName
     * @param {Object|Function} overrides, with key==filename, and value==data
     */
    proxy<T>(fileName: String | RequireFunction<T>, overrides?: Object | ProxyFunction): T;
    /**
     * Loads a file and hooks deps in a `proxyquire` way
     * @param {Function} fileLoader. Require or Import desired module
     * @param {Object} overrides, with key==filename, and value==data
     */
    module<T>(fileLoader: ImportFunction<T>, overrides?: Object | ProxyFunction): Promise<T>;

    flush(): void;
    clear(): void;
    /**
     * converts module name
     * @param module
     */
    resolve(module: string): string,

    /**
     * Activates module isolation
     * @param {Boolean} [options.noAutoPassBy] auto-includes mocked modules passBy list.
     */
    isolation(options?: Object): rewiremock;

    /**
     * Deactivates isolation
     */
    withoutIsolation(): rewiremock;

    /**
     * Adding new isolationpassby record
     */
    passBy(pattern: any): rewiremock;


    /**
     * Adds a plugin
     */
    addPlugin(plugin: any): rewiremock;
}

declare module 'rewiremock' {
    var rewiremockdefault: rewiremock;
}

export default rewiremockdefault;